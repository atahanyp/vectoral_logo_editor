"""
Ana PDF Editor uygulamasÄ± - ModÃ¼ler YapÄ±
"""

import os
import sys
import traceback
import xml.etree.ElementTree as ET
from PyQt5.QtWidgets import (
    QApplication, QVBoxLayout, QHBoxLayout, QLabel, QLineEdit, QPushButton, QFileDialog,
    QWidget, QFormLayout, QScrollArea, QGroupBox, QColorDialog
)
from PyQt5.QtGui import QPixmap, QImage, QTransform, QPainter
from PyQt5.QtCore import Qt
import fitz

# Import our modules
from src.ui_components.custom_widgets import CustomLineEdit
from src.pdf_processor.pdf_processor import PDFProcessor
from src.file_manager.file_manager import FileManager

CM_TO_PT = 72/2.54


class PDFEditorApp(QWidget):
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("PDF Logo Editor")
        self.setGeometry(100, 100, 1200, 800)
        self.setAcceptDrops(True)  # Ana pencereye sÃ¼rÃ¼kle-bÄ±rak Ã¶zelliÄŸi ekle

        # BileÅŸenleri baÅŸlat
        self.pdf_processor = PDFProcessor()
        self.file_manager = FileManager()
        
        # Yeni Ã¶zellikler iÃ§in deÄŸiÅŸkenler
        self.aspect_ratio_locked = True  # BaÅŸlangÄ±Ã§ta Ã¶lÃ§ek kilitli
        self.logo_aspect_ratio = None    # Logo en/boy oranÄ± (yÃ¼klenince hesaplanacak)
        self.fixed_aspect_ratio = None   # Sabit Ã¶lÃ§ek oranÄ±
        self.pdf_path = None
        self.logo_path = None
        self.bg_color = "#ffffff"   #"#B9E7BA"
        self.pdf_processor.bg_color = self.bg_color  # PDFProcessor'a rengi aktar
        self.rotation_angle = 0  # DÃ¶ndÃ¼rme aÃ§Ä±sÄ±nÄ± takip etmek iÃ§in
        self.heighta = 0
        self.inputlogowidth = 0
        self.inputlogoheight = 0
        
        # Zoom faktÃ¶rÃ¼ ve sÄ±nÄ±rlarÄ±
        self.zoom_factor = 1.0  # BaÅŸlangÄ±Ã§ deÄŸeri 1.0'a dÃ¼ÅŸÃ¼rÃ¼ldÃ¼
        self.zoom_min = 0.5     # Minimum zoom 0.5'e dÃ¼ÅŸÃ¼rÃ¼ldÃ¼
        self.zoom_max = 16.0    # Maximum zoom 16.0

        self.init_ui()

    def init_ui(self):
        """ArayÃ¼zÃ¼ oluÅŸturma"""
        
        main_layout = QHBoxLayout()

        # Sol Panel: Kontroller
        self.control_panel = QVBoxLayout()

        # ğŸ“Œ Sayfa AyarlarÄ± BÃ¶lÃ¼mÃ¼
        self.page_settings_group = QGroupBox("Sayfa AyarlarÄ±")
        page_settings_layout = QFormLayout()

        self.page_width_input = CustomLineEdit(self)  # QLineEdit yerine CustomLineEdit
        self.page_height_input = CustomLineEdit(self)
        self.page_left_margin_input = CustomLineEdit(self)
        self.page_right_margin_input = CustomLineEdit(self)
        self.page_top_margin_input = CustomLineEdit(self)

        try:
            # Ã–nceki ayarlarÄ± yÃ¼kle
            settings = self.file_manager.useprevset()
            if len(settings) >= 5:
                self.page_width_input.setText(settings[0])
                self.page_height_input.setText(settings[1])
                self.page_left_margin_input.setText(settings[2])
                self.page_right_margin_input.setText(settings[3])
                self.page_top_margin_input.setText(settings[4])
            else:
                raise ValueError("Yeterli veri bulunamadÄ±.")
        except Exception as e:  # Herhangi bir hata oluÅŸursa
            self.page_width_input.setText("58")  # VarsayÄ±lan deÄŸer
            self.page_height_input.setText(" ")   # BoÅŸ bÄ±rakÄ±ldÄ±
            self.page_left_margin_input.setText("0.1")
            self.page_right_margin_input.setText("0.1")
            self.page_top_margin_input.setText("0.1")

        page_settings_layout.addRow("Sayfa GeniÅŸliÄŸi (cm):", self.page_width_input)
        page_settings_layout.addRow("Sayfa YÃ¼ksekliÄŸi (cm):", self.page_height_input)
        page_settings_layout.addRow("Soldan Yatay BoÅŸluk (cm):", self.page_left_margin_input)
        page_settings_layout.addRow("SaÄŸdan Yatay BoÅŸluk (cm):", self.page_right_margin_input)
        page_settings_layout.addRow("Ãœstten Dikey BoÅŸluk (cm):", self.page_top_margin_input)

        # ğŸ“Œ Sayfa Boyunu Otomatik Hesaplama Butonu
        self.setkayt_button = QPushButton("Sayfa AyarlarÄ±nÄ± Kaydet")  # Yeni buton
        self.setkayt_button.clicked.connect(self.setkaydet)
        self.color_button = QPushButton("Arka Plan Rengini SeÃ§")
        self.color_button.clicked.connect(self.select_color)
        self.color_button.setStyleSheet(f"background-color: {self.bg_color}; padding: 5px;")

        button_row_layout = QHBoxLayout()
        button_row_layout.addWidget(self.setkayt_button)  # Sol tarafta yeni buton
        button_row_layout.addWidget(self.color_button)  # SaÄŸ tarafta mevcut buton

        # Bu dÃ¼zeni page_settings_layout'a ekleyin
        page_settings_layout.addRow(button_row_layout)
        
        self.page_settings_group.setLayout(page_settings_layout)

        # ğŸ“Œ Logo AyarlarÄ± BÃ¶lÃ¼mÃ¼
        self.logo_settings_group = QGroupBox("Logo AyarlarÄ±")
        logo_settings_layout = QVBoxLayout()
        logo_form_layout = QFormLayout()

        self.total_logo_input = CustomLineEdit(self)
        self.spacing_input = CustomLineEdit(self)
        self.spacingy_input = CustomLineEdit(self)
        self.logo_width_input = CustomLineEdit(self)
        self.logo_height_input = CustomLineEdit(self)

        # ğŸ“Œ VarsayÄ±lan DeÄŸerler
        self.total_logo_input.setText("10")
        self.spacing_input.setText("1")
        self.spacingy_input.setText("1")
        self.logo_width_input.setText("10")
        self.logo_height_input.setText("10")

        # ğŸ“Œ Ã–lÃ§ek Kilidi Butonu
        self.lock_scale_button = QPushButton("Ã–lÃ§ek Kilidi: AÃ§Ä±k ğŸ”’")
        self.lock_scale_button.setCheckable(True)
        self.lock_scale_button.setChecked(True)  # BaÅŸlangÄ±Ã§ta kilitli
        self.lock_scale_button.clicked.connect(self.toggle_aspect_ratio_lock)
        
        # ğŸ“Œ DÃ¶ndÃ¼rme Butonu Ekleme
        self.rotate_button = QPushButton("Logoyu 90Â° DÃ¶ndÃ¼r")
        self.rotate_button.clicked.connect(self.rotate_logo)

        # ğŸ“Œ KullanÄ±cÄ± giriÅŸlerini Enter veya focus kaybÄ±nda gÃ¼ncelle
        self.logo_width_input.returnPressed.connect(lambda: self.update_logo_dimensions(self.logo_width_input))
        self.logo_height_input.returnPressed.connect(lambda: self.update_logo_dimensions(self.logo_height_input))

        logo_form_layout.addRow("Toplam Logo SayÄ±sÄ±:", self.total_logo_input)
        logo_form_layout.addRow("Logolar ArasÄ± Yatay BoÅŸluk (cm):", self.spacing_input)
        logo_form_layout.addRow("Logolar ArasÄ± Dikey BoÅŸluk (cm):", self.spacingy_input)
        logo_form_layout.addRow("Logonun GeniÅŸliÄŸi (cm):", self.logo_width_input)
        logo_form_layout.addRow("Logonun YÃ¼ksekliÄŸi (cm):", self.logo_height_input)
        logo_form_layout.addRow("", self.lock_scale_button)
        logo_form_layout.addRow("", self.rotate_button)  # DÃ¶ndÃ¼rme butonu eklendi

        # ğŸ“Œ Logo SeÃ§imi
        self.logo_file_button = QPushButton("Logo DosyasÄ± SeÃ§")
        self.logo_file_button.clicked.connect(self.select_pdf)
        self.logo_preview_label = QLabel("SeÃ§ilen Logo Ã–nizlemesi")
        self.logo_preview_label.setStyleSheet("border: 1px solid black;")
        self.logo_preview_label.setFixedSize(100, 100)  # KÃ¼Ã§Ã¼k kare boyut
        self.logo_preview_label.setAcceptDrops(True)  # SÃ¼rÃ¼kle-bÄ±rak Ã¶zelliÄŸi ekle
        self.logo_preview_label.dragEnterEvent = self.dragEnterEvent
        self.logo_preview_label.dropEvent = self.dropEvent
        self.save_as_button = QPushButton("FarklÄ± Kaydet")
        self.save_as_button.clicked.connect(self.save_as_pdf)  # âœ… Yeni fonksiyona baÄŸla   

        logo_file_layout = QVBoxLayout()
        logo_file_layout.addWidget(self.logo_file_button)
        logo_file_layout.addWidget(self.logo_preview_label)
        

        # ğŸ“Œ Logo AyarlarÄ±nÄ± DÃ¼zenle
        logo_settings_layout.addLayout(logo_form_layout)
        logo_settings_layout.addLayout(logo_file_layout)
        self.logo_settings_group.setLayout(logo_settings_layout)

        # ğŸ“Œ DeÄŸiÅŸiklikleri Uygula Butonu
        self.auto_height_button = QPushButton("Sayfa Boyunu Otomatik Hesaplayarak OluÅŸtur")
        self.auto_height_button.clicked.connect(self.calculate_page_height)

        self.man_height_button = QPushButton("Sayfa Boyunu Manuel Ayarlayarak OluÅŸtur")
        self.man_height_button.clicked.connect(self.apply_changes)
        
        # ğŸ“Œ Sol Panel ElemanlarÄ±
        self.control_panel.addWidget(self.page_settings_group)
        self.control_panel.addWidget(self.logo_settings_group)
        self.control_panel.addWidget(self.auto_height_button)
        self.control_panel.addWidget(self.man_height_button)
        self.control_panel.addWidget(self.save_as_button)

        # ğŸ“Œ SaÄŸ Panel: PDF Ã–nizleme - main6.py'deki gibi
        self.pdf_preview_scroll = QScrollArea()
        self.pdf_preview_label = QLabel("PDF Ã¶nizlemesi burada gÃ¶rÃ¼necek.")
        self.pdf_preview_label.setStyleSheet("border: 1px solid black;")
        self.pdf_preview_label.setScaledContents(False)  # OranÄ± koruyacaÄŸÄ±z
        self.pdf_preview_scroll.setWidget(self.pdf_preview_label)
        self.pdf_preview_scroll.setWidgetResizable(True)

        # ğŸ“Œ Ana DÃ¼zeni YerleÅŸtir
        main_layout.addLayout(self.control_panel, 1)  # Kontrol paneline 1 birim alan
        main_layout.addWidget(self.pdf_preview_scroll, 3)  # PDF Ã¶nizlemesine 3 birim alan

        self.setLayout(main_layout)

    def setkaydet(self):
        """AyarlarÄ± kaydet"""
        settings = [
            self.page_width_input.text(),
            self.page_height_input.text(),
            self.page_left_margin_input.text(),
            self.page_right_margin_input.text(),
            self.page_top_margin_input.text()
        ]
        self.file_manager.setkaydet(settings)

    def select_color(self):
        """Renk seÃ§ici aÃ§"""
        color = QColorDialog.getColor()
        if color.isValid():
            self.bg_color = color.name()  # Hexadecimal formatta rengi alÄ±r
            self.pdf_processor.bg_color = self.bg_color  # PDFProcessor'da bg_color'Ä± gÃ¼ncelle
            self.color_button.setStyleSheet(f"background-color: {self.bg_color}; padding: 5px;")
            print(f"SeÃ§ilen Renk: {self.bg_color}")

            if not self.pdf_path:
                return
                
            current_dir = os.getcwd()
            output2_path = os.path.join(current_dir, "output2_preview.pdf")
            self.pdf_processor.add_transparent_logos(
                pdf_path=self.pdf_path,
                output_path=output2_path,
                logo_width_cm=float(self.logo_width_input.text()),
                logo_height_cm=float(self.logo_height_input.text()),
                spacing_cm=float(self.spacing_input.text()),
                spacingy_cm=float(self.spacingy_input.text()),
                page_width_cm=float(self.page_width_input.text()),
                page_height_cm=float(self.page_height_input.text()),
                pagexcm=float(self.page_left_margin_input.text()),
                pagexrcm=float(self.page_right_margin_input.text()),
                pageycm=float(self.page_top_margin_input.text()),
                total_logo=int(self.total_logo_input.text()),
                arkaplan=True,
                bg_color=self.bg_color
            )
            self.load_pdf_preview(output2_path)

    def save_as_pdf(self):
        """PDF olarak kaydet"""
        if not self.pdf_path:
            self.logo_preview_label.setText("Ã–nce bir PDF dosyasÄ± seÃ§in!")
            return
        
        # ğŸ“‚ KullanÄ±cÄ±dan Kaydetme Konumunu Al
        save_path, _ = QFileDialog.getSaveFileName(
            self, 
            "FarklÄ± Kaydet", 
            "output.pdf",  # VarsayÄ±lan dosya adÄ±
            "PDF Files (*.pdf);;All Files (*)"
        )

        # ğŸ“Œ EÄŸer kullanÄ±cÄ± bir yol seÃ§tiyse, PDF'yi buraya kaydet
        if save_path:
            if not self.page_height_input.text():
                self.pdf_processor.calculate_transparent_logos(
                    pdf_path=self.pdf_path,
                    output_path=save_path,
                    logo_width_cm=float(self.logo_width_input.text()),
                    logo_height_cm=float(self.logo_height_input.text()),
                    spacing_cm=float(self.spacing_input.text()),
                    spacingy_cm=float(self.spacingy_input.text()),
                    page_width_cm=float(self.page_width_input.text()),
                    pagexcm=float(self.page_left_margin_input.text()),
                    pagexrcm=float(self.page_right_margin_input.text()),
                    pageycm=float(self.page_top_margin_input.text()),
                    total_logo=int(self.total_logo_input.text()),
                )
            else:
                self.pdf_processor.add_transparent_logos(
                    pdf_path=self.pdf_path,
                    output_path=save_path,
                    logo_width_cm=float(self.logo_width_input.text()),
                    logo_height_cm=float(self.logo_height_input.text()),
                    spacing_cm=float(self.spacing_input.text()),
                    spacingy_cm=float(self.spacingy_input.text()),
                    page_width_cm=float(self.page_width_input.text()),
                    page_height_cm=float(self.page_height_input.text()),
                    pagexcm=float(self.page_left_margin_input.text()),
                    pagexrcm=float(self.page_right_margin_input.text()),
                    pageycm=float(self.page_top_margin_input.text()),
                    total_logo=int(self.total_logo_input.text()),
                    arkaplan=True,
                    bg_color=self.bg_color
                )
            
            # AyarlarÄ± kaydet
            self.setkaydet()
            print(f"PDF kaydedildi: {save_path}")

    def apply_changes(self):
        """Manuel sayfa boyunu kullanarak PDF oluÅŸtur"""
        if not self.pdf_path:
            self.pdf_preview_label.setText("LÃ¼tfen Ã¶nce bir PDF dosyasÄ± seÃ§in!")
            return
            
        current_dir = os.getcwd()
        output1_path = os.path.join(current_dir, "output_preview.pdf")
        self.pdf_processor.add_transparent_logos(
            pdf_path=self.pdf_path,
            output_path=output1_path,
            logo_width_cm=float(self.logo_width_input.text()),
            logo_height_cm=float(self.logo_height_input.text()),
            spacing_cm=float(self.spacing_input.text()),
            spacingy_cm=float(self.spacingy_input.text()),
            page_width_cm=float(self.page_width_input.text()),
            page_height_cm=float(self.page_height_input.text()),
            pagexcm=float(self.page_left_margin_input.text()),
            pagexrcm=float(self.page_right_margin_input.text()),
            pageycm=float(self.page_top_margin_input.text()),
            total_logo=int(self.total_logo_input.text()),
        )
        self.load_pdf_preview(output1_path)

    def calculate_page_height(self):
        """Sayfa yÃ¼ksekliÄŸini otomatik hesapla"""
        if not self.pdf_path:
            self.pdf_preview_label.setText("LÃ¼tfen Ã¶nce bir PDF dosyasÄ± seÃ§in!")
            return
            
        current_dir = os.getcwd()
        output1_path = os.path.join(current_dir, "output_preview.pdf")
        
        page_height_pt = self.pdf_processor.calculate_transparent_logos(
            pdf_path=self.pdf_path,
            output_path=output1_path,
            logo_width_cm=float(self.logo_width_input.text()),
            logo_height_cm=float(self.logo_height_input.text()),
            spacing_cm=float(self.spacing_input.text()),
            spacingy_cm=float(self.spacingy_input.text()),
            page_width_cm=float(self.page_width_input.text()),
            pagexcm=float(self.page_left_margin_input.text()),
            pagexrcm=float(self.page_right_margin_input.text()),
            pageycm=float(self.page_top_margin_input.text()),
            total_logo=int(self.total_logo_input.text()),
        )
        
        self.heighta = page_height_pt
        self.page_height_input.setText(f"{page_height_pt / CM_TO_PT:.2f}")
        self.load_pdf_preview2(output1_path)
        print("Sayfa boyu hesaplama fonksiyonu tetiklendi.")

    def update_logo_dimensions(self, source_input):
        """KullanÄ±cÄ± Enter tuÅŸuna basÄ±nca veya kutudan Ã§Ä±kÄ±nca en/boy oranÄ±na gÃ¶re gÃ¼nceller"""
        if self.aspect_ratio_locked:
            try:
                if source_input == self.logo_width_input:
                    self.update_logo_height()
                elif source_input == self.logo_height_input:
                    self.update_logo_width()
            except ValueError:
                pass

    def toggle_aspect_ratio_lock(self):
        """Ã–lÃ§ek kilidini aÃ§/kapat ve o anki oranÄ± baz al."""
        if not self.aspect_ratio_locked:
            try:
                self.inputlogowidth = float(self.logo_width_input.text())
                self.inputlogoheight = float(self.logo_height_input.text())

                if self.inputlogowidth > 0 and self.inputlogoheight > 0:
                    self.fixed_aspect_ratio = self.inputlogowidth / self.inputlogoheight
                else:
                    self.fixed_aspect_ratio = self.logo_aspect_ratio if self.logo_aspect_ratio else 1.0
            except ValueError:
                self.fixed_aspect_ratio = self.logo_aspect_ratio if self.logo_aspect_ratio else 1.0

        self.aspect_ratio_locked = not self.aspect_ratio_locked

        if self.aspect_ratio_locked:
            self.lock_scale_button.setText("Ã–lÃ§ek Kilidi: AÃ§Ä±k ğŸ”’")
            if self.focusWidget() == self.logo_width_input:
                self.update_logo_dimensions(self.logo_width_input)
            elif self.focusWidget() == self.logo_height_input:
                self.update_logo_dimensions(self.logo_height_input)
            else:
                self.update_logo_dimensions(self.logo_width_input)
        else:
            self.lock_scale_button.setText("Ã–lÃ§ek Kilidi: KapalÄ± ğŸ”“")

    def update_logo_height(self):
        """En giriÅŸine gÃ¶re boyu otomatik hesapla"""
        if self.aspect_ratio_locked:
            try:
                self.inputlogowidth = float(self.logo_width_input.text())
                self.inputlogoheight = self.inputlogowidth / self.fixed_aspect_ratio
                self.logo_height_input.setText(f"{self.inputlogoheight:.2f}")
            except ValueError:
                self.logo_height_input.setText("Hata!")

    def update_logo_width(self):
        """Boy giriÅŸine gÃ¶re eni otomatik hesapla"""
        if self.aspect_ratio_locked:
            try:
                self.inputlogoheight = float(self.logo_height_input.text())
                self.inputlogowidth = self.inputlogoheight * self.fixed_aspect_ratio
                self.logo_width_input.setText(f"{self.inputlogowidth:.2f}")
            except ValueError:
                self.logo_width_input.setText("Hata!")

    def dragEnterEvent(self, event):
        """SÃ¼rÃ¼kleme olayÄ±nÄ± kontrol et"""
        if event.mimeData().hasUrls():
            for url in event.mimeData().urls():
                if url.toLocalFile().lower().endswith('.pdf'):
                    event.acceptProposedAction()
                    return
        event.ignore()

    def dropEvent(self, event):
        """Dosya bÄ±rakÄ±ldÄ±ÄŸÄ±nda Ã§alÄ±ÅŸacak fonksiyon"""
        files = [url.toLocalFile() for url in event.mimeData().urls()]
        if files:
            self.pdf_path = files[0]
            self.rotation_angle = 0
            self.process_pdf_file(self.pdf_path)

    def select_pdf(self):
        """PDF dosyasÄ± seÃ§"""
        options = QFileDialog.Options()
        self.pdf_path, _ = QFileDialog.getOpenFileName(
            self, "PDF DosyasÄ± SeÃ§", "", "PDF Files (*.pdf);;All Files (*)", options=options
        )
        if self.pdf_path:
            self.rotation_angle = 0
            self.process_pdf_file(self.pdf_path)

    def process_pdf_file(self, pdf_path):
        """PDF dosyasÄ±nÄ± iÅŸle"""
        try:
            # PDF'i iÅŸle ve kÄ±rp
            processed_pdf, width, height = self.file_manager.process_pdf_file(pdf_path, self.pdf_processor)
            
            self.pdf_path = processed_pdf
            # pdf_processor'a da pdf_path'i ayarla
            self.pdf_processor.pdf_path = processed_pdf
            
            # OranÄ± hesapla ve kaydet
            self.logo_aspect_ratio = width / height
            self.fixed_aspect_ratio = self.logo_aspect_ratio
            
            # Form alanlarÄ±nÄ± gÃ¼ncelle
            self.logo_width_input.setText(f"{width:.2f}")
            self.logo_height_input.setText(f"{height:.2f}")
            
            # Ã–nizleme oluÅŸtur
            pixmap = self.file_manager.create_preview_image(self.pdf_path, dpi=96)
            if pixmap:
                self.logo_preview_label.setPixmap(pixmap.scaled(100, 100))
            
        except Exception as e:
            print(f"PDF iÅŸleme hatasÄ±: {str(e)}")
            traceback.print_exc()

    def rotate_logo(self):
        """Logoyu 90 derece dÃ¶ndÃ¼r"""
        if not self.pdf_path:
            print("LÃ¼tfen Ã¶nce bir PDF yÃ¼kleyin!")
            return

        try:
            # Rotasyon aÃ§Ä±sÄ±nÄ± gÃ¼ncelle
            self.rotation_angle = (self.rotation_angle + 90) % 360
            
            # PDF'i dÃ¶ndÃ¼r
            rotated_pdf = self.file_manager.rotate_pdf(self.pdf_path, self.rotation_angle)
            
            if rotated_pdf:
                self.pdf_path = rotated_pdf
                
                # Mevcut deÄŸerleri al
                current_width = float(self.logo_width_input.text())
                current_height = float(self.logo_height_input.text())
                
                # Rotasyon aÃ§Ä±sÄ±na gÃ¶re boyutlarÄ± gÃ¼ncelle
                if self.rotation_angle in [90, 270]:
                    new_width = current_height
                    new_height = current_width
                else:
                    new_width = current_width
                    new_height = current_height
                
                # Form alanlarÄ±nÄ± gÃ¼ncelle
                self.logo_width_input.setText(f"{new_width:.2f}")
                self.logo_height_input.setText(f"{new_height:.2f}")
                
                # Logo oranÄ±nÄ± gÃ¼ncelle
                self.logo_aspect_ratio = new_width / new_height
                self.fixed_aspect_ratio = self.logo_aspect_ratio
                
                # Ã–nizlemeyi gÃ¼ncelle
                pixmap = self.file_manager.create_preview_image(self.pdf_path, dpi=300)
                if pixmap:
                    self.logo_preview_label.setPixmap(pixmap.scaled(100, 100, Qt.KeepAspectRatio, Qt.SmoothTransformation))
                
                print(f"Logo baÅŸarÄ±yla {self.rotation_angle}Â° dÃ¶ndÃ¼rÃ¼ldÃ¼")
                
        except Exception as e:
            print(f"DÃ¶ndÃ¼rme hatasÄ±: {str(e)}")
            traceback.print_exc()

    def load_pdf_preview(self, pdf_path):
        """PDF Ã¶nizlemesi yÃ¼kle"""
        # KullanÄ±cÄ±nÄ±n belirlediÄŸi sayfa geniÅŸliÄŸi ve yÃ¼ksekliÄŸi (cm)
        try:
            user_width_cm = float(self.page_width_input.text())
            user_height_cm = float(self.page_height_input.text())
        except ValueError:
            self.pdf_preview_label.setText("GeÃ§erli bir geniÅŸlik ve yÃ¼kseklik girin!")
            return

        # PDF'i aÃ§ ve ilk sayfayÄ± yÃ¼kle
        doc = fitz.open(pdf_path)
        page = doc[0]
        pix = page.get_pixmap(dpi=96)  # 96 DPI Ã¶nizleme iÃ§in uygundur

        # KullanÄ±cÄ± girdilerini piksel cinsine dÃ¶nÃ¼ÅŸtÃ¼r
        target_width_px = int(user_width_cm * 37.795)  # 1 cm = 37.795 px
        target_height_px = int(user_height_cm * 37.795)

        # QImage ve QPixmap'e dÃ¶nÃ¼ÅŸtÃ¼r
        qt_img = QImage(pix.samples, pix.width, pix.height, pix.stride, QImage.Format_RGB888)
        pixmap = QPixmap.fromImage(qt_img)

        # Pixmap'i Ã¶lÃ§ekle ve etikete uygula
        self.pdf_preview_label.setPixmap(pixmap.scaled(target_width_px, target_height_px))
        doc.close()

    def load_pdf_preview2(self, pdf_path):
        """PDF Ã¶nizlemesi yÃ¼kle (dinamik yÃ¼kseklik)"""
        # KullanÄ±cÄ±nÄ±n belirlediÄŸi sayfa geniÅŸliÄŸi ve yÃ¼ksekliÄŸi (cm)
        try:
            user_width_cm = float(self.page_width_input.text())
            user_height_cm = self.heighta
        except ValueError:
            self.pdf_preview_label.setText("GeÃ§erli bir geniÅŸlik girin!")
            return
            
        # PDF'i aÃ§ ve ilk sayfayÄ± yÃ¼kle
        doc = fitz.open(pdf_path)
        page = doc[0]
        pix = page.get_pixmap(dpi=96)  # 96 DPI Ã¶nizleme iÃ§in uygundur

        # KullanÄ±cÄ± girdilerini piksel cinsine dÃ¶nÃ¼ÅŸtÃ¼r
        target_width_px = int(user_width_cm * 37.795)  # 1 cm = 37.795 px
        target_height_px = int(user_height_cm)

        # QImage ve QPixmap'e dÃ¶nÃ¼ÅŸtÃ¼r
        qt_img = QImage(pix.samples, pix.width, pix.height, pix.stride, QImage.Format_RGB888)
        pixmap = QPixmap.fromImage(qt_img)

        # Pixmap'i Ã¶lÃ§ekle ve etikete uygula
        self.pdf_preview_label.setPixmap(pixmap.scaled(target_width_px, target_height_px))
        doc.close()


def main():
    app = QApplication(sys.argv)
    window = PDFEditorApp()
    window.show()
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
